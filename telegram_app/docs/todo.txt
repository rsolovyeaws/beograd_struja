1. Понять, что номер дома находится в диапозоне 
    - например пользователь ввел Зумен Кордунашка 13е, нужно понять что этот адресс находится в диапозоне Кордунашка 11-14ж
2. Автоматический парсинг сайта с обьялениями об отключении (1 раз в 24 часа)
3. Автоматическая отправка сообщений пользователям, у которых адресс добавлен в мониторинг
-----

1. Сайт в котором можно ввести почту, номер телефона и адрес 
    - оповещение через почту
    - оповещение через смс


---- 
I need to write periodic celery task that will 
1. Find addresses added by all users in the ScheduledAddresses 
2. Collect all addresses to the dict that contains user info  from the User table and dict with address and time_range
3. Mark user field notified_at to the current time_range
4. Notify user thorugh telegram bot (will emplement later) 

---- 
I need to match address provided by the user (stored in the Address model)
to the address range stored in db (ScheduledAddress).
Each part of the address is stored separately (as you can see in the model).


Write function that will compare address enterd by the user to each record in ScheduledAddress,
if ScheduledAddress house_range contains "-"
then function should determine if house_number from the Address table is within that range


example 1:
    - user enters: ЗВЕЗДАРА, СМЕДЕРЕВСКИ ПУТ, 17
    - stored in db:  ЗВЕЗДАРА, СМЕДЕРЕВСКИ ПУТ, 16-26В
    - expected outcome from comparing 2 entries: address enterd by the user is within the address stored in db

example 2: 
    - user enters: ЗВЕЗДАРА, СМЕДЕРЕВСКИ ПУТ, 2А
    - stored in db:  ЗВЕЗДАРА, СМЕДЕРЕВСКИ ПУТ, 2Д-2X
    - expected outcome from comparing 2 entries: address enterd by the user is NOT within the address range stored in db

example 3: 
    - user enters: ЗВЕЗДАРА, СТЕВАНА СИНЂЕЛИЋА, 75Ж
    - stored in db:  ЗВЕЗДАРА, СТЕВАНА СИНЂЕЛИЋА, 75-87
    - expected outcome from comparing 2 entries: address enterd by the user is within the address stored in db


this are the models:
from sqlalchemy import Column, Integer, String, Boolean, DateTime, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship

Base = declarative_base()

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True, autoincrement=True)
    telegram_id = Column(Integer, nullable=False)
    first_name = Column(String(100), nullable=False)
    last_name = Column(String(100), nullable=False)
    username = Column(String(100), nullable=False)
    is_bot = Column(Boolean, default=False)
    language_code = Column(String(4), nullable=False)
    notified_at = Column(DateTime, default=None)
    is_active = Column(Boolean, default=True)
    
    addresses = relationship("Address", back_populates="user")

class Address(Base):
    __tablename__ = "addresses"

    id = Column(Integer, primary_key=True, index=True)
    full_address = Column(String(100), nullable=False)
    area = Column(String(100), nullable=False)
    street = Column(String(100), nullable=False)
    house_number = Column(String(100), nullable=False)
    confirmed_geolocation = Column(Boolean, default=False)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    user_id = Column(Integer, ForeignKey("users.id"))
    
    user = relationship("User", back_populates="addresses")
    
class ScheduledAddress(Base):
    __tablename__ = "scheduled_addresses"
    
    id = Column(Integer, primary_key=True, index=True)
    municipality = Column(String(100), nullable=False)
    street = Column(String(100), nullable=False)
    settlement = Column(String(100), nullable=True)
    house_range = Column(String(100), nullable=False)
    time_range = Column(String(100), nullable=False)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())


ANSWER: 
import re

def is_within_range(user_address, scheduled_address):
    """
    Compares user-provided address with a scheduled address.
    
    Args:
        user_address (Address): User's address entry.
        scheduled_address (ScheduledAddress): Scheduled address entry from the database.
    
    Returns:
        bool: True if the user's address is within the scheduled address range, False otherwise.
    """
    # Check if area and street match exactly
    if (user_address.area == scheduled_address.municipality and
        user_address.street == scheduled_address.street):
        
        # Extract house_number from user's address
        user_house_number = user_address.house_number
        
        # Check if the scheduled house_range contains a hyphen (range)
        if "-" in scheduled_address.house_range:
            # Split the house range by the hyphen
            range_start, range_end = scheduled_address.house_range.split("-")
            
            # Clean alphanumeric values (e.g., 16A, 26B) for numeric comparison
            user_house_number_numeric = re.match(r"^\d+", user_house_number)
            range_start_numeric = re.match(r"^\d+", range_start)
            range_end_numeric = re.match(r"^\d+", range_end)
            
            if not user_house_number_numeric or not range_start_numeric or not range_end_numeric:
                return False  # If any numeric part is missing, the address is not within the range
            
            user_house_number_numeric = int(user_house_number_numeric.group())
            range_start_numeric = int(range_start_numeric.group())
            range_end_numeric = int(range_end_numeric.group())
            
            # Check if the user's house number is within the numeric range
            if range_start_numeric <= user_house_number_numeric <= range_end_numeric:
                return True
            else:
                return False
        else:
            # If there's no range, compare directly with the house number
            return user_address.house_number == scheduled_address.house_range
    return False


# Example usage:
# Assuming `user_address` is an instance of Address and `scheduled_address` is an instance of ScheduledAddress
# user_address = Address(...)
# scheduled_address = ScheduledAddress(...)
# result = is_within_range(user_address, scheduled_address)
xplanation:
Municipality and Street Matching: First, it checks if the municipality (or area) and street fields match between the user's address and the scheduled address.

House Number Range: If the house_range in the scheduled address contains a hyphen (-), it assumes it’s a range, splits it into two parts (start and end), and converts these into numeric values for comparison. It also extracts numeric parts from the user's house number.

Alphanumeric Handling: If the house number is alphanumeric (e.g., "16A"), the function only uses the numeric portion for range comparison.

Direct Comparison: If no range is provided, the function compares the house number directly.

This should work for your use cases where some house numbers include alphanumeric characters, and some have ranges.

-----

This is a good start, but it lacks certain aspects of the logic.
alpha values need to be considered as part of the range.

all letters in the address or in the range are serbian cyrillic alphabet:
['А', 'Б', 'В', 'Г', 'Д', 'Ђ', 'Е', 'Ж', 'З', 'И', 'Ј', 'К', 'Л', 'Љ', 'М', 'Н', 'Њ', 'О', 'П', 'Р', 'С', 'Т', 'Ћ', 'У', 'Ф', 'Х', 'Ц', 'Ч', 'Џ', 'Ш']

example:
1Б is part of the range 1А-1В
1Г is not part of the range 1А-1В


----------------
I need 
